input{
        stdin{}
        kafka{
                bootstrap_servers=>["192.168.3.112:9092"]
                client_id=>"test"
                group_id=>"test"
                auto_offset_reset=>"latest"
                consumer_threads=>5
                decorate_events=>true
                topics_pattern=>"kafka-.*"
                type=>"kafka"
        }

}

filter{
        dissect{
                mapping=>{
                        "message"=>"%{logdate} %{+logdate} [%{src}] [%{level}] %{thread} %{classline} - %{msg}"
                }
        }

        if !([msg] =~ /^(\s*)\n/){

        if [src] == "gwlog" {
                dissect{
                        mapping=>{
                                "msg"=>"%{model} %{sn} %{process} %{level} [date:%{logdate}]:%{classline} %{msg}"
                        }
                }

                mutate{
                        remove_field=>["@version","host","message","@timestamp","thread"]
                }

                date{
                        match=>["logdate","yyyy-MM-dd HH:mm:ss.SSS","UNIX","yyyy.MM.dd HH:mm:ss"]
                        target=>"@timestamp"
                }
                ruby{
                        code=>"event.set('logdate',event.get('@timestamp').time.localtime + 8*60*60)"
                }

                if [msg] =~ /(?=msg:)/{
                        dissect{
                                mapping=>{
                                        "msg"=>"msg:%{msg}"
                                }
                        }

                        json{
                                source=>"msg"
                        }

                }

                if [msg] =~ /(?=netbus send to)/{
                        dissect{
                                mapping=>{
                                        "msg"=>"netbus send to %{dest}:%{msg}"
                                }
                        }
                        json{
                                source=>"msg"
                        }
                        if [func] == "gwevent" {
                                mutate{
                                        add_field=>{"sec_json"=>"%{eventparams}"}
                                }
                                json{
                                        source=>"sec_json"
                                        remove_field=>["sec_json","eventparams"]
                                }
                        }

                        #if [func] in ["basicInfo","getPower"] {
                        #       mutate{
                        #               add_field=>{"sec_json"=>"%{returnData}"}
                        #       }
                        #       json{
                        #               source=>"sec_json"
                        #               remove_field=>["sec_json","returnData","params"]
                        #       }
                        #
                        #}
                }
        } else {
                dissect{
                        mapping=>{
                                "src"=>"IP:%{ip}/%{src}"
                        }
                }

                mutate{
                        remove_field=>["@version","host","message","@timestamp"]
                        add_field=>{
                                "process"=>"%{src}"
                        }
                }
                date{
                        match=>["logdate","yyyy-MM-dd HH:mm:ss.SSS"]
                }

                if [msg] =~ /(?=metrics:)/{
                        dissect{
                                mapping=>{
                                        "msg"=>"metrics:%{sqlid},%{msg}"
                                }
                        }

                        mutate{
                                update=>{"type"=>"metrics"}
                        }
                }

                if[msg] =~ /(?=serverSsh-)/{
                        dissect{
                                mapping=>{
                                        "msg"=>"serverSsh-%{host}-%{sshcmd},%{msg}"
                                }
                        }
                        mutate{
                                update=>{"type"=>"serverMetrics"}
                        }
                }

                if[msg] =~ /(?=sip-process)/{
                        dissect{
                                mapping=>{
                                        "msg"=>"sip-process:%{msg}"
                                }
                        }

                        json{
                                source=>"msg"
                        }

                        mutate{
                                update=>{"src"=>"sip-process"}
                        }
                }

                if[msg] =~ /(?=mqtt-process)/{
                        dissect{
                                mapping=>{
                                        "msg"=>"mqtt-process:%{msg}"
                                }
                        }

                        json{
                                source=>"msg"
                        }

                        mutate{
                                update=>{"src"=>"mqtt-process"}
                        }
                }

                if[msg] =~ /(?=rtp-process)/{
                        dissect{
                                mapping=>{
                                        "msg"=>"rtp-process:%{msg}"
                                }
                        }

                        json{
                                source=>"msg"
                        }

                        mutate{
                                update=>{"src"=>"rtp-process"}
                        }
                }
		
		if[msg] =~ /(?=sip-transfer)/{
			dissect{
				mapping=>{
					"msg"=>"sip-transfer,%{msg}"
				}
			}
			
			json{
				source=>"msg"
			}
			
			mutate{
				add_field=>{"updatetime"=>"%{logdate}"}
				update=>{"src"=>"sip-transfer"}
				remove_field=>["msg","ip","type","level","classline","thread","process","logdate"]
			}
		}
        }
}
} # end 'msg != ""'

output{
        #if !([msg] =~ /^(\s*)\n/) {
        if [src] == "gwlog" {
                elasticsearch{
                        hosts=>["192.168.3.112:9200"]
                        index=>"%{process}_%{+YYYY.MM.dd}"
                        timeout=>300
			template=>"/usr/local/work/log/script/normal.json"
			#template_name=>"normal"
			template_overwrite=>true
			
                }

                #if [level] in ["ERROR","FATAL"] {
                #       http{
                #               url=>"https://oapi.dingtalk.com/robot/send?access_token=d1547fad582bde69b03c70e3a2430b322f0e874f2298ab0f80c4c7668e024f88"
                #               http_method=>"post"
                #               content_type=>"application/json; charset=utf-8"
                #               format=>"message"
                #               message=>'{
                #                       "msgtype":"text",
                #                       "text":{
                #                               "content":"[%{model}-%{sn}]:[%{logdate}]:[%{src}]:[%{level}]:%{classline} -> %{msg}"
                #                       }
                #               }'
                #       }
                #}
        } else {
                if [type] in ["metrics","serverMetrics"] {
                        #http{
                        #       url=>"http://192.168.3.233:2222/vertx/metrics?token=d1547fad582bde69b03c70e3a2430b322f0e"
                        #       http_method=>"post"
                        #       content_type=>"application/json; charset=utf-8"
                        #       format=>"message"
                        #       message=>"%{msg}"
                        #}


                        if [type] == "metrics" {
                                #jdbc{
                                #        driver_jar_path=>"/usr/local/work/log/logstash/mysql/mysql-connector-java-5.1.47.jar"
                                #        driver_class=>"com.mysql.jdbc.Driver"
                                #        connection_string=>"jdbc:mysql://47.106.94.189:3306/orange_iot?useSSL=false&allowPublicKeyRetrieval=true&user=root&password=Orangeiot!23"
                                #        statement=>["INSERT INTO t_metrics_process(id,logdate,process,msg) VALUES(?,?,?,?) ON DUPLICATE KEY UPDATE logdate=?,msg=?","sqlid","logdate","process","msg","logdate","msg"]
                                #}
                        } else {
                                #jdbc{
                                #        driver_jar_path=>"/usr/local/work/log/logstash/mysql/mysql-connector-java-5.1.47.jar"
                                #        driver_class=>"com.mysql.jdbc.Driver"
                                #        connection_string=>"jdbc:mysql://47.106.94.189:3306/orange_iot?useSSL=false&allowPublicKeyRetrieval=true&user=root&password=Orangeiot!23"
                                #        statement=>["INSERT INTO t_metrics_server(host,sshcmd,logdate,msg) VALUES(?,?,?,?) ON DUPLICATE KEY UPDATE logdate=?,msg=?","host","sshcmd","logdate","msg","logdate","msg"]
                                #}
                        }

                } else {
                        if [src] == "node-exporter" {
                                # do nothing.
                        } else if [src] == "sip-transfer" {
				elasticsearch{
                                	hosts=>["192.168.3.112:9200"]
                                	action=>"update"
                                	doc_as_upsert=>true
                                	document_id=>"%{callid}"
                                	index=>"sip-transfer_%{+YYYY.MM.dd}"
					timeout=>300
					template=>"/usr/local/work/log/script/sip-transfer.json"
					#template_name=>"sip-transfer"
					template_overwrite=>true
                            }
			} else {
				if [src] == "sip-process" {
					elasticsearch{
						hosts=>["192.168.3.112:9200"]
						index=>"%{src}_%{+YYYY.MM.dd}"
						timeout=>300
						template=>"/usr/local/work/log/script/sip-process.json"
						#template_name=>"sip-process"
						template_overwrite=>true
					}
				} else if [src] == "mqtt-process" {
					elasticsearch{
						hosts=>["192.168.3.112:9200"]
						index=>"%{src}_%{+YYYY.MM.dd}"
						timeout=>300
						template=>"/usr/local/work/log/script/mqtt-process.json"
						#template_name=>"mqtt-process"
						template_overwrite=>true
					}
				} else if [src] == "rtp-process" {
					elasticsearch{
						hosts=>["192.168.3.112:9200"]
						index=>"%{src}_%{+YYYY.MM.dd}"
						timeout=>300
						template=>"/usr/local/work/log/script/rtp-process.json"
						#template_name=>"rtp-process"
						template_overwrite=>true
					}
				} else {
					elasticsearch{
						hosts=>["192.168.3.112:9200"]
						index=>"%{src}_%{+YYYY.MM.dd}"
						timeout=>300
						template=>"/usr/local/work/log/script/normal.json"
						#template_name=>"*"
						template_overwrite=>true
					}
				}

                                # publish sip-transfer log
                                if [src] == "sip-process" {
					http{
						url=>"http://192.168.3.233:2222/kaadas/sip/transfer?token=d1547fad582bde69b03c70e3a2430b322f0e"
						http_method=>"post"
						content_type=>"application/json; charset=utf-8"
						format=>"message"
						message=>"%{msg}"
					}	
                                }                                
																
                        }

                if [level] in ["ERROR","FATAL"] {
                        if [msg] =~ /(?=return data is null)/{
                                # do nothing.
                        } else if [msg] =~ /(?=========event no send)/{
                                #do nothing.
                        } else if [msg] =~ /(?========gateway user size 1)/{
                                #do nothing.
                        } else if [msg] =~ /(?========gateway user size 2)/{
                                #do nothing.
                        } else if [msg] =~ /(?========gateway user size 3)/{
                                #do nothing.
                        } else if [msg] =~ /(?========gateway user size 7)/{
                                # do nothing.
                        } else if [msg] =~ /(?=Connection reset by peer)/{
                                #do nothing.
                        } else if [msg] =~ /(?========gateway no have admin)/ {
                                #do nothing.
                        } else if [msg] =~ /(?=writeLog method this logFile is null , clientId)/ {
                                #do nothing.
                        } else if [msg] =~ /(?=java.nio.channels.ClosedChannelException)/ {
                                #do nothing.
                        } else {
                                http{
                                        url=>"https://oapi.dingtalk.com/robot/send?access_token=d1547fad582bde69b03c70e3a2430b322f0e874f2298ab0f80c4c7668e024f88"
                                        http_method=>"post"
                                        content_type=>"application/json; charset=utf-8"
                                        format=>"message"
                                        message=>'{
                                                "msgtype":"text",
                                                "text":{
                                                        "content":"[%{logdate}]:[%{src}]:[%{level}]:%{classline} -> %{msg}"
                                                }
                                        }'
                                }
                        }
                  }
                }
              }
        #} # end of 'if msg != ""'
}
#       if [level] in ["WARN","ERROR","FATAL"] {
#               email{
#                       port=>"25"
#                       address=>"smtp.qq.com"
#                       username=>"@qq.com"
#                       password=>""
#                       authentication=>"plain"
#                       use_tls=>false
#                       from=>""
#                       subject=>"warning: program have error!"
#                       to=>""
#                       via=>"smtp"
#                       body=>"%{src},%{classline},%{msg}"
#               }
#               http{
#                       url=>"https://oapi.dingtalk.com/robot/send?access_token=d1547fad582bde69b03c70e3a2430b322f0e874f2298ab0f80c4c7668e024f88"
#                       http_method=>"post"
#                       content_type=>"application/json; charset=utf-8"
#                       format=>"message"
#                       message=>'{
#                               "msgtype":"text",
#                               "text":{
#                                       "content":"[%{logdate}]:[%{src}]:[%{level}]:%{classline} -> %{msg}"
#                               }
#                       }'
#               }
#       }

